--------------------------------------------------------------------------------
|
| Ptil0psis's Call - PCALL 简单的远程函数调用库
|
--------------------------------------------------------------------------------

库：

- include PCALL要使用到的头文件
    - pcall.h 要使用Pcall，需要使用的核心文件

- demo 测试程序

- client 简单的PCALL客户端实现 & Python调用实现

--------------------------------------------------------------------------------

介绍：

0. Pcall能干什么

Pcall能解析简单的字符串为函数调用。为了方便传输和最小化开销，字符串可以在客户端暂时解析成中间格式，
然后在服务器完成函数调用。除此之外，PCall还能自动生成程序注释文档，避免API/文档不一致带来的问题。

1. Pcall和普通的通信协议实现有什么区别？

常规的服务器/客户端架构，需要开发者自行约定通信协议。使用Pcall不需要约定通信协议，只需要直接传输
即可。而且Pcall可以更好的保证服务器/客户端定义的一致性，不会出现通信协议不一致导致的解析错误。

2. Pcall如何保证一致性？

用户使用Pcall库时，服务器/客户端使用同一个头文件共享函数定义，所以不会出现定义不一致的问题。

3. PCall的中间格式是什么？为什么字符串要先解析成中间格式？

PCall的客户端解析字符串后，产生对应的中间格式（二进制数据）。使用中间格式有助于最小化Pcall库
在服务器带来的额外开销

--------------------------------------------------------------------------------

使用：

0. 概念

要使用PCall，需要知道几个概念：服务器、客户端、函数调用、PCall号、代码

* 服务器：解析中间格式并处理函数调用的程序。
* 客户端：自动生成注释文档、提供字符串解析服务的程序。
* 函数调用：通过字符串，调用代码对应的函数
* PCall号：函数调用在服务器储存为一个顺序表，PCall号是一个从一递增的，和顺序表序号对应的数字
* 代码：用户在声明函数调用时，需要声明对应的调用代码。代码和函数名称是一对一的关系

1. 如何使用

使用PCall有下面的步骤：编写函数调用声明、分发客户端&服务器

2. 如何编写函数调用声明

用户需要在一个文件中编写所有的要使用的函数调用，见demo/test_table.h文件

3. 如何分发客户端&服务器

将编写的说明引用到对应的服务器/客户端中。具体见demo/test_client.cpp和demo/test_server.cpp

4. 客户端&服务器需要在同一台机器上吗？

PCall的客户端/服务器不同于web的C/S架构，是不负责通信部分的，所有的数据传输需要用户自行完成。
这也意味着，只是将PCall库作为一个解析字符串并完成函数调用的库使用也是可以的。当然，PCall库的设计
是针对上位机/下位机架构，上位机计算能力大于下位机的场景设计的。

虽然使用了同一个声明文件，得益于PCall大量的条件编译，服务器部分不会保存声明文件产生的的函数文档和
代码定义，只会保存用来解析中间格式所必要的信息。这种架构使得服务端不会产生太多额外的代码/使用太多
额外的库。

如果用户是上位机/下位机的架构，并且资源受限的载体要作为PCall的服务器，那么就可以将客户端程序
部署在上位机，将服务器程序部署在下位机。

如果下位机资源充足，当然可以将服务器&客户端都部署在同一个程序中。此时中间格式就可以在同一个程序
中传输。但是要注意，要获得程序文档依然要访问客户端，所以这时候用户必须处理将字符串发送到下位机
（传输代码）和将字符串发到上位机（传输程序注释文档）的任务。